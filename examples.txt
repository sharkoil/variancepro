#example1

const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};




#example2
// added for obvi reasons... I would default to dark for same reasons
const darkMode = false; // an option for mornings I guess?

// source: https://www.chartjs.org/docs/latest/samples/bar/vertical.html
const actions = [
  {
    name: "Randomize",
    handler(chart) {
      chart.data.datasets.forEach((dataset) => {
        dataset.data = Utils.numbers({
          count: chart.data.labels.length,
          min: -100,
          max: 100
        });
      });
      chart.update();
    }
  },
  {
    name: "Add Dataset",
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: "Dataset " + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        borderWidth: 1,
        data: Utils.numbers({ count: data.labels.length, min: -100, max: 100 })
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: "Add Data",
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({ count: data.labels.length + 1 });

        for (var index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: "Remove Dataset",
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: "Remove Data",
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach((dataset) => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];

// source: me
// written to implement actions array (from samples)
// into buttons like from the sample
actions.forEach((a, i) => {
  let button = document.createElement("button");
  button.id = "button"+i;
  button.innerText = a.name;
  button.onclick = () => a.handler(myChart);
  document.querySelector(".buttons").appendChild(button);
});

// source: https://www.chartjs.org/docs/master/samples/utils.html
// thanks @LeeLenaleee & @etimberg! 
const CHART_COLORS = {
    red: "rgb(255, 99, 132)",
    orange: "rgb(255, 159, 64)",
    yellow: "rgb(255, 205, 86)",
    green: "rgb(75, 192, 192)",
    blue: "rgb(54, 162, 235)",
    purple: "rgb(153, 102, 255)",
    grey: "rgb(101, 103, 107)"
  };
const NAMED_COLORS = [
    CHART_COLORS.red,
    CHART_COLORS.orange,
    CHART_COLORS.yellow,
    CHART_COLORS.green,
    CHART_COLORS.blue,
    CHART_COLORS.purple,
    CHART_COLORS.grey,
];
const valueOrDefault = (value, defaultValue) => {
  return typeof value === "undefined" ? defaultValue : value;
}
var _seed = Date.now();
const Utils = {
  MONTHS: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ],
  months(config) {
    var cfg = config || {};
    var count = cfg.count || 12;
    var section = cfg.section;
    var values = [];
    var i, value;

    for (i = 0; i < count; ++i) {
      value = this.MONTHS[Math.ceil(i) % 12];
      values.push(value.substring(0, section));
    }

    return values;
  },
  "CHART_COLORS": CHART_COLORS,
  "NAMED_COLORS": NAMED_COLORS,
  numbers(config) {
    var cfg = config || {};
    var min = valueOrDefault(cfg.min, 0);
    var max = valueOrDefault(cfg.max, 100);
    var from = valueOrDefault(cfg.from, []);
    var count = valueOrDefault(cfg.count, 8);
    var decimals = valueOrDefault(cfg.decimals, 8);
    var continuity = valueOrDefault(cfg.continuity, 1);
    var dfactor = Math.pow(10, decimals) || 0;
    var data = [];
    var i, value;

    for (i = 0; i < count; ++i) {
      value = (from[i] || 0) + this.rand(min, max);
      if (this.rand() <= continuity) {
        data.push(Math.round(dfactor * value) / dfactor);
      } else {
        data.push(null);
      }
    }

    return data;
  },
  rand(min, max) {
    min = valueOrDefault(min, 0);
    max = valueOrDefault(max, 0);
    _seed = (_seed * 9301 + 49297) % 233280;
    return min + (_seed / 233280) * (max - min);
  },
  transparentize(value, opacity) {
    var alpha = opacity === undefined ? 0.5 : 1 - opacity;
    return window["@kurkle/color"](value).alpha(alpha).rgbString();
  },
  namedColor: (index) => NAMED_COLORS[index % NAMED_COLORS.length],
};

// source: https://www.chartjs.org/docs/latest/samples/bar/vertical.html
const DATA_COUNT = 7;
const NUMBER_CFG = { count: DATA_COUNT, min: -100, max: 100 };
const labels = Utils.months({ count: DATA_COUNT });
const data = {
  color: "#c0d0e0", // added for dark mode
  labels,
  datasets: [
    {
      label: "Dataset 1",
      data: Utils.numbers(NUMBER_CFG),
      color: darkMode ? "#c0d0e0" : undefined, // dark mode
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.34)
    },
    {
      label: "Dataset 2",
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      color: darkMode ? "#c0d0e0" : undefined, 
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.34)
    }
  ]
};

let config = {
  type: "bar" || "line", // other types need config adjustments
  data,
  options: {
    responsive: true,
    plugins: {
      legend: { 
        labels: {
          color: darkMode ? "#c0d0e0" : undefined, 
        },
        position: "top" 
      },
      title: {
        display: true,
        text: "Chart.js Bar Chart",
        color: darkMode ? "#c0d0e0" : undefined, 
      },
    },
     scales: { // added for dark mode
      y: { 
        ticks: { color: darkMode ? "#c0d0e0" : undefined },
        grid: { 
          // source: https://www.chartjs.org/docs/master/samples/scale-options/grid.html
          color: (context) => {
            if (context.tick.value > 0) {
              return Utils.transparentize( Utils.CHART_COLORS.green, 0.5);
            } else if (context.tick.value < 0) {
              return Utils.transparentize( Utils.CHART_COLORS.red, 0.5);
            }
            return '#c0d0e0';
          }, 
        },
      },
      x: { 
        ticks: { color: darkMode ? "#c0d0e0" : undefined }, 
        grid: { color: "#aaa" },
      },
    },
  }
};
// added for dark mode
const body = document.querySelector("body");
if (darkMode) {
  config.options.scales = { // added for dark mode
     y: { 
       ticks: { color: "#c0d0e0" },
       grid: { 
         // source: https://www.chartjs.org/docs/master/samples/scale-options/grid.html
         color: function(context) {
           if (context.tick.value > 0) {
             return Utils.transparentize( Utils.CHART_COLORS.green, 0.5);
           } else if (context.tick.value < 0) {
             return Utils.transparentize( Utils.CHART_COLORS.red, 0.5);
           }
           return '#c0d0e0';
         }, 
       },
     },
     x: { 
       ticks: { color: "#c0d0e0" }, 
       grid: { color: "#909090" },
     },
   };
  body.className = "dark";
}
// source: other docs, not the samples
const ctx = document.getElementById("myChart");
let myChart = new Chart(ctx, config);




#example3
     var chrt = document.getElementById("chartId").getContext("2d");
      var chartId = new Chart(chrt, {
         type: 'bar',
         data: {
            labels: ["HTML", "CSS", "JAVASCRIPT", "CHART.JS", "JQUERY", "BOOTSTRP"],
            datasets: [{
               label: "online tutorial subjects",
               data: [20, 40, 30, 35, 30, 20],
               backgroundColor: ['yellow', 'aqua', 'pink', 'lightgreen', 'lightblue', 'gold'],
               borderColor: ['red', 'blue', 'fuchsia', 'green', 'navy', 'black'],
               borderWidth: 2,
            }],
         },
         options: {
            responsive: false,
         },
      });
